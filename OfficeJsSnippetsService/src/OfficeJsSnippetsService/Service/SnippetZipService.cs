using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using OfficeJsSnippetsService.Common;

namespace OfficeJsSnippetsService.Service
{
    public class SnippetZipService : ISnippetZipService
    {
        private readonly ISnippetContentService snippetContentService;
        private readonly SnippetManifestProvider manifestProvider;

        public SnippetZipService(ISnippetContentService snippetContentService, SnippetManifestProvider manifestProvider)
        {
            Ensure.ArgumentNotNull(snippetContentService, nameof(snippetContentService));
            Ensure.ArgumentNotNull(manifestProvider, nameof(manifestProvider));

            this.snippetContentService = snippetContentService;
            this.manifestProvider = manifestProvider;
        }

        public async Task ZipToStreamAsync(string snippetId, Stream stream)
        {
            var files = new List<IncludedFileInfo>();
            files.Add(new IncludedFileInfo { BlobName = "html", ZippedName = "index.html" });
            files.Add(new IncludedFileInfo { BlobName = "css", ZippedName = "app.css" });
            files.Add(new IncludedFileInfo { BlobName = "js", ZippedName = "app.js" });
            files.Add(new IncludedFileInfo { BlobName = "extras", ZippedName = "extras.txt" });

            var tasks = new List<Task>();
            foreach (var fileInfo in files)
            {
                tasks.Add(this.GetFileContentIfExists(snippetId, fileInfo));
            }
            await Task.WhenAll(tasks);

            files.Add(new IncludedFileInfo { ZippedName = "manifest.xml", Contents = this.manifestProvider.GenerateManifest(snippetId) });
            files.Add(new IncludedFileInfo { ZippedName = "readme.txt", Contents = "Generated by the Office.js API Playground" });

            using (var zip = new ZipArchive(stream, ZipArchiveMode.Create, leaveOpen: true))
            {
                foreach (var fileInfo in files)
                {
                    if (fileInfo.Contents == null)
                    {
                        continue;
                    }

                    var entry = zip.CreateEntry(fileInfo.ZippedName);
                    using (StreamWriter writer = new StreamWriter(entry.Open()))
                    {
                        writer.Write(fileInfo.Contents);
                    }
                }
            }
        }

        private async Task GetFileContentIfExists(string snippetId, IncludedFileInfo fileInfo)
        {
            try
            {
                fileInfo.Contents = await this.snippetContentService.GetContentAsync(snippetId, fileInfo.BlobName);
            }
            catch (MyWebException ex)
            {
                if (ex.StatusCode != HttpStatusCode.NotFound)
                {
                    throw;
                }
            }
        }

        private class IncludedFileInfo
        {
            public string BlobName { get; set; }
            public string ZippedName { get; set; }
            public string Contents { get; set; }
        }
    }
}